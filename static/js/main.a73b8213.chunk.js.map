{"version":3,"sources":["components/Header.js","constants.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Wrapper","menuLinks","map","menu","MenuLink","key","to","styled","header","_templateObject","Link","_templateObject2","INVITATION_PAGE","App","state","page","render","BrowserRouter","App_Wrapper","_this","React","Component","div","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+fAWe,IAAAA,EAAA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAACC,EAAD,KACGC,EAAUC,IAAI,SAAAC,GAAI,OACjBN,EAAAC,EAAAC,cAACK,EAAD,CAAUC,IAAKF,EAAK,GAAIG,GAAIH,EAAK,IAAKA,EAAK,QAM7CF,EAAY,CAChB,CAAC,cAAe,cAChB,CAAC,QAAS,YACV,CAAC,UAAW,UACZ,CAAC,SAAU,cAGPD,EAAUO,IAAOC,OAAVC,KAMPL,EAAWG,YAAOG,IAAPH,CAAHI,KC3BDC,EAAkB,2FCOVC,6MACnBC,MAAQ,CACNC,KAAMH,KAGRI,OAAS,WACP,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACJ,EAAD,CAAQoB,KAAMI,EAAKL,MAAMC,uCATFK,IAAMC,WAgBjCrB,EAAUO,IAAOe,IAAVC,KClBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAOnB,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a73b8213.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport type { PageType } from '../constants';\n\ntype Props = {\n  page: PageType,\n}\n\nexport default (props: Props) => {\n  return (\n    <Wrapper>\n      {menuLinks.map(menu => (\n        <MenuLink key={menu[0]} to={menu[0]}>{menu[1]}</MenuLink>\n      ))}\n    </Wrapper>\n  );\n}\n\nconst menuLinks = [\n  ['/invitation', 'Invitation'],\n  ['/city', 'Montreal'],\n  ['/photos', 'Photos'],\n  ['/facts', 'Fun Facts'],\n];\n\nconst Wrapper = styled.header`\n  background-color: white;\n  display: flex;\n  justfiy-content: space-around;\n`;\n\nconst MenuLink = styled(Link)`\n  text-transform: uppercase;\n`;\n","/**\n * @flow\n *\n *\n */\n\n// Page constants\nexport const INVITATION_PAGE = 'invitation-page';\nexport const CITY_PAGE = 'city-page';\nexport const PHOTO_PAGE = 'photo-pages';\nexport const FACTS_PAGE = 'facts-page';\n\nexport type PageType =\n  typeof INVITATION_PAGE |\n  typeof CITY_PAGE |\n  typeof PHOTO_PAGE |\n  typeof FACTS_PAGE;\n","// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Header from './Header';\n\nimport { INVITATION_PAGE } from '../constants';\nimport type { PageType } from '../constants';\n\ntype State = {\n  page: PageType,\n}\n\nexport default class App extends React.Component<{}, State> {\n  state = {\n    page: INVITATION_PAGE,\n  }\n\n  render = () => {\n    return (\n      <Router>\n        <Wrapper>\n          <Header page={this.state.page} />\n        </Wrapper>\n      </Router>\n    );\n  }\n}\n\nconst Wrapper = styled.div``;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}